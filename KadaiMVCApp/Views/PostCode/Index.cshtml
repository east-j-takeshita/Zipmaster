@model ZipViewModel//型を指定しているだけ
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    
}


<div id="index" class="text-left">
    <h1 class="display-3">{{ title }}</h1>
    <form >@* asp-controller="PostCode" asp-action="Index" *@
        @* 送信先のコントローラー名、送信先のアクション指定 *@
        <div class="form-group">
            <label for="postcode">郵便番号</label>
            <input type="text" name="postcode" id="postcode" class="form-control" placeholder="検索したい郵便番号を入力して検索してください" :value="keyWord.keyPostCode" />@* v-model="searchData.keyPostCode" *@
            <label for="keyword">キーワード検索欄</label>
            <input type="text" name="keyword" id="keyword" class="form-control" placeholder="検索したいキーワードを入力して検索してください" :value="keyWord.keyWord" />

        </div>
        <div class="form-group">
            <button v-on:click="getZipData" type="button" class="btn btn-primary">送信</button>
        </div>
    </form>
    <p v-if="zipsData===null">該当データはありません</p>
    <table class="table">
        <tr>
            <th>郵便番号</th>
            <th>都道府県名</th>
            <th>市区町村名</th>
            <th>町域名</th>
            <th>詳細リンク</th>

        </tr>

        <tr v-for="zip in zipsData" :key="zip.id">
            <td>{{zip.postCode}}</td>
            <td>{{zip.prefecture}}</td>
            <td>{{zip.city}}</td>
            <td>{{zip.shipToAddress}}</td>
            <td><a v-bind:href="url+zip.postOrderID">詳細はこちら</a></td>
        </tr>

    </table>

    
    <button type="submit" class="btn btn-primary" onclick="location.href='PostCode/Create'" value="遷移" />新規追加
</div>

<script src="https://unpkg.com/vue@next"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
    
    const { createApp, ref,computed ,watchEffect} = Vue;
    createApp({
        setup() {
            const title = ref('検索Vue');

            const zips = ref([]);

            const keyWord = ref(@Html.Raw(Json.Serialize(Model.Keyword)));
            const searchData = ref({
                postCode: '1510053',
                keyWord:'東京',

            });
            const url = ref('PostCodeDetail/');
            const zipsData = ref();
            const getZipData = async() => {
                try {
                    
                    const config = {
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest',
                            'Content-Type': 'application/x-www-form-urlencoded'
                        }
                    };

                    console.log(searchData.value.postCode);
                   
                    


                    console.log(keyWord);
                    console.log(keyWord.value);
                    console.log(keyWord.value.keyPostCode);
                    
                    console.log(keyWord.keyPostCode);
                    

                    const response = await axios.post('/index');//APIと合わせる
                        // .then(res =>
                        //     this.data = res.searchData.value.postCode
                            
                        // )
                        // .catch(err => 
                        //     console.log(err.statusText)
                        // );

                    //APIに合わせる
                    console.log(response);
                    zipsData.value = response.data.zipsData;//取ってきたデータ格納。zipsDataにはいろいろ入っているので、valueをつける。
                }
                    

                catch (err) {
                    console.error(err);
                }
            };
            
            //watchEffect(() => { console.log(zipsData.value) });//valueつけたらちゃんと呼ばれる。
            

            return {
                title,
                keyWord,
                searchData,
                url,
                getZipData,
                zipsData
                
            };
        }
        

    }).mount('#index');
    // アプリケーションを特定のDOM要素にマウント
    
</script>